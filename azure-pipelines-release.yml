trigger:
- none
pr:
- none

parameters:
- name: version
  displayName: Release Version
  type: string
  default: ''
- name: releaseNotes
  displayName: Release Notes
  type: string
  default: ''

variables:
- name: Version
  value: ${{ parameters.version }}
- group: NitroPackerSecrets

stages:
- stage: Build
  jobs:
  - job:
    strategy:
      matrix:
        Linux:
          imageName: 'ubuntu-latest'
          artifactName: 'NitroPacker-Linux-$(Version)'
          rid: 'linux-x64'
          artifactPath: '$(Build.SourcesDirectory)/NitroPacker-Linux-$(Version).tar.gz'
        macOS:
          imageName: 'macOS-latest'
          artifactName: 'NitroPacker-macOS-$(Version)'
          rid: 'osx-x64'
          artifactPath: '$(Build.SourcesDirectory)/NitroPacker-macOS-$(Version).tar.gz'
        Windows:
          imageName: 'windows-latest'
          artifactName: 'NitroPacker-Windows-$(Version)'
          rid: 'win-x64'
          artifactPath: '$(Build.SourcesDirectory)/NitroPacker-Windows-$(Version).zip'
    displayName: Build & Publish
    pool:
      vmImage: $(imageName)
    steps:
    - checkout: self
      clean: true
      
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: $(Build.SourcesDirectory)/HaroohieClub.NitroPacker.Cli/HaroohieClub.NitroPacker.Cli.csproj
        arguments: '-c Release -f net8.0 -r $(rid) --self-contained /p:PublishSingleFile=true'
        publishWebProjects: false
      displayName: Build & Publish NitroPacker
        
    - pwsh: |
        mkdir publish
        Expand-Archive -Path $(Build.SourcesDirectory)/HaroohieClub.NitroPacker.Cli/bin/Release/net8.0/$(rid)/publish.zip -DestinationPath ./publish
        Push-Location publish
        chmod +x ./NitroPacker
        tar -czvf $(artifactPath) ./NitroPacker
        Pop-Location
      condition: ne(variables['imageName'], 'windows-latest')
      displayName: Create tar

    - pwsh: |
        mkdir publish
        Expand-Archive -Path $(Build.SourcesDirectory)/HaroohieClub.NitroPacker.Cli/bin/Release/net8.0/$(rid)/publish.zip .\publish
        Push-Location publish
        Compress-Archive -Path .\NitroPacker.exe -DestinationPath $(artifactPath)
        Pop-Location
      condition: eq(variables['imageName'], 'windows-latest')
      displayName: Create zip

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(artifactPath)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      displayName: Publish build artifact

- stage: Publish_Packages
  dependsOn: []
  jobs:
  - job:
    pool:
      vmImage: ubuntu-latest
    displayName: Build and publish nupkgs
    steps:
    - task: NuGetAuthenticate@1
      displayName: NuGet Authenticate

    - script: |
        dotnet build $(Build.SourcesDirectory)/HaroohieClub.NitroPacker/HaroohieClub.NitroPacker.csproj --configuration Release
        dotnet pack $(Build.SourcesDirectory)/HaroohieClub.NitroPacker/HaroohieClub.NitroPacker.csproj --output $(Build.ArtifactStagingDirectory) --configuration Release
      displayName: Build and pack nupkgs

    - script: dotnet nuget push --api-key $(NuGetKey) -s nuget.org $(Build.ArtifactStagingDirectory)/HaroohieClub.NitroPacker.$(Version).nupkg
      displayName: NuGet push

- stage: Release
  dependsOn: Build
  jobs:
  - job:
    pool:
      vmImage: ubuntu-latest
    displayName: Create release
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux artifacts
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'NitroPacker-Linux-$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download macOS artifacts
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'NitroPacker-macOS-$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows artifacts
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'NitroPacker-Windows-$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - pwsh: |
        Move-Item -Path $(Build.ArtifactStagingDirectory)/NitroPacker-Linux-$(Version)/NitroPacker-Linux-$(Version).tar.gz -Destination $(Build.ArtifactStagingDirectory)/NitroPacker-Linux-$(Version).tar.gz
        Move-Item -Path $(Build.ArtifactStagingDirectory)/NitroPacker-macOS-$(Version)/NitroPacker-macOS-$(Version).tar.gz -Destination $(Build.ArtifactStagingDirectory)/NitroPacker-macOS-$(Version).tar.gz
        Move-Item -Path $(Build.ArtifactStagingDirectory)/NitroPacker-Windows-$(Version)/NitroPacker-Windows-$(Version).zip -Destination $(Build.ArtifactStagingDirectory)/NitroPacker-Windows-$(Version).zip
      displayName: Move artifacts
    - task: GitHubRelease@1
      displayName: 'Create GitHub Release'
      inputs:
        gitHubConnection: 'GitHub Connection (Jonko)'
        tagSource: userSpecifiedTag
        tag: '$(Version)'
        title: 'NitroPacker v$(Version)'
        releaseNotesSource: inline
        releaseNotesInline: |
          ${{ parameters.releaseNotes }}